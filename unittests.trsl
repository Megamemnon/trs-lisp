(display "trs-lisp Unit Tests")
(newline)
(define (pass X) 
        (begin (display X) 
               (ansi-fg 32) 
               (display " PASS") 
               (ansi-reset)
               (newline)))
(define (fail X) 
        (begin (display X) 
               (ansi-fg 31) 
               (display " FAIL") 
               (ansi-reset)
               (newline)))

(newline)
(display "R5RS Primitives...")
(newline)

(if (= (+ 1 1) 2) 
    (pass "+") 
    (fail "+"))
(if (= (- 2 1) 1) 
    (pass "-") 
    (fail "-"))
(if (= (* 3 2) 6)
    (pass "*")
    (fail "*"))
(if (= (/ 6 2) 3)
    (pass "/")
    (fail "/"))
(if (= 1 1)
    (pass "=")
    (fail "="))
(if (< 2 3)
    (pass "<")
    (fail "<"))
(if (> 6 3)
    (pass ">")
    (fail ">"))
(if (<= 2 3)
    (pass "<=")
    (fail "<="))
(if (>= 6 3)
    (pass ">=")
    (fail ">="))
(begin (pass "begin"))
(if (= 6 (car ' (6 2)))
    (pass "car")
    (fail "car"))
(if (= 2 (cdr ' (6 2)))
    (pass "cdr")
    (fail "cdr"))
(if (= 65 (char->integer "A"))
    (pass "char->integer")
    (fail "char->integer"))
(if (char-alphabetic? "abc")
    (pass "char-alphabetic?")
    (fail "char-alphabetic?"))
(if (char-numeric? "1bc")
    (pass "char-numeric?")
    (fail "char-numeric?"))
(if (char-whitespace? " bc")
    (pass "char-whitespace?")
    (fail "char-whitespace?"))
(if (char-upper-case? "Abc")
    (pass "char-upper-case?")
    (fail "char-upper-case?"))
(if (char-lower-case? "abc")
    (pass "char-lower-case?")
    (fail "char-lower-case?"))
(pass "close-input-port")
(pass "cond")
(if (eq? a (car (cons a b)))
    (pass "cons")
    (fail "cons"))
(pass "define")
(pass "display")
(do ((i (0) (+ i 1))) ((> i 0) (pass "do")) (noop))
(pass "eof-object?")
(if (eqv? a a)
    (pass "eqv?")
    (fail "eqv?"))
(if (eq? a a)
    (pass "eq?")
    (fail "eq?"))
(if (string=? "A" (integer->char 65))
    (pass "integer->char")
    (fail "integer->char"))
(if (string=? "let" (let ((z "let")) z))
    (pass "let")
    (fail "let"))
(if (eqv? a (car (list a b)))
    (pass "list")
    (fail "list"))
(pass "load")
(pass "newline")
(if (string=? "1.000000" (number->string 1))
    (pass "number->string")
    (fail "number->string"))
(define f 
        (open-input-file "/home/brian/git/trs-lisp/open-input-file.trsl"))
(define j 
        (open-output-file "/home/brian/git/trs-lisp/open-output-file.trsl"))
(do ((c (read-char f) 
        (read-char f))) 
    ((eof-object? c) (newline)) 
    (write-char c j))
(close-input-port f)
(close-output-port j)
(pass "quote")
(pass "readc-char")
(define x 1)
(set! (' x) 2)
(if (= x 2) 
    (pass "set!")
    (fail "set!"))
(if (string=? "this" "this")
    (pass "string=?")
    (fail "string=?"))
(if (string=? "thisthat" (string-append "this" "that"))
    (pass "string-append")
    (fail "string-append"))
(define t "This is a string")
(if (= 16 (string-length t)) 
    (pass "string-length")
    (fail "string-length"))
(set! (' x) "string 1")
(define y (substring x 2 5))
(if (string=? y "tri") 
    (pass "substring") 
    (fail "substring"))

(newline)
(display "Custom Primitives...")
(newline)

(pass "ansi")
(pass "ansi-reset")
(pass "exit")
(pass "strcmp")
(pass "type")


(newline)
(display "Macros...")
(newline)

(if (boolean? (= 1 1))
    (pass "boolean")
    (fail "boolean"))
(if (eq? a (cadr (b a d)))
    (pass "cadr")
    (fail "cadr"))
(if (eq? a (caddr (b c a d)))
    (pass "caddr")
    (fail "caddr"))
(if (equal? "this" "this")
    (pass "equal?")
    (fail "equal?"))
(pass "if")
(if (negative? (- 0 2))
    (pass "negative?")
    (fail "negative?"))
(if (number? 0)
    (pass "number?")
    (fail "number?"))
(if (positive? 5)
    (pass "positive?")
    (fail "positive?"))
(if (stream? f)
    (pass "stream?")
    (fail "stream?"))
(if (string? t) 
    (pass "string?") 
    (fail "string?"))
(if (string>? "bad" "art") 
    (pass "string>?") 
    (fail "string>?"))
(if (string<? "ad" "bart") 
    (pass "string<?") 
    (fail "string<?"))
(if (string>=? "bad" "art") 
    (pass "string>=?") 
    (fail "string>=?"))
(if (string<=? "art" "art") 
    (pass "string<=?") 
    (fail "string<=?"))
(if (symbol? symbol?)
    (pass "symbol?")
    (fail "symbol?"))
(if (zero? 0)
    (pass "zero?")
    (fail "zero?"))


