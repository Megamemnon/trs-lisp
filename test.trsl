(define (pass X) 
        (begin (display X) 
               (ansi 32) 
               (display " PASS") 
               (ansi-reset)
               (newline)))
(define (fail X) 
        (begin (display X) 
               (ansi 31) 
               (display " FAIL") 
               (ansi-reset)
               (newline)))

(if (= (+ 1 1) 2) 
    (pass "+") 
    (fail "+"))
(if (= (- 2 1) 1) 
    (pass "-") 
    (fail "-"))
(if (= (* 3 2) 6)
    (pass "*")
    (fail "*"))
(if (= (/ 6 2) 3)
    (pass "/")
    (fail "/"))
(if (= 1 1)
    (pass "=")
    (fail "="))
(if (< 2 3)
    (pass "<")
    (fail "<"))
(if (> 6 3)
    (pass ">")
    (fail ">"))
(if (<= 2 3)
    (pass "<=")
    (fail "<="))
(if (>= 6 3)
    (pass ">=")
    (fail ">="))

(begin (pass "begin"))
(if (= 6 (car ' (6 2)))
    (pass "car")
    (fail "car"))
(if (= 2 (cdr ' (6 2)))
    (pass "cdr")
    (fail "cdr"))
(if (char-alphabetic? "abc")
    (pass "char-alphabetic?")
    (fail "char-alphabetic?"))
(if (char-numeric? "1bc")
    (pass "char-numeric?")
    (fail "char-numeric?"))
(if (char-white-space? " bc")
    (pass "char-white-space?")
    (fail "char-white-space?"))
(if (char-upper-case? "Abc")
    (pass "char-upper-case?")
    (fail "char-upper-case?"))
(if (char-lower-case? "abc")
    (pass "char-lower-case?")
    (fail "char-lower-case?"))
(pass "close-input-port")
(pass "cond")
(fail "cons")
(pass "define")
(display (pass "display"))
(fail "do")
(pass "eof-object?")
(fail "eqv?")
(fail "eq?")
(fail "integer->char")
(fail "let")
(fail "list")
(pass "load")
(pass "newline")
(fail "number->string")
(define f 
        (open-input-file "/home/brian/git/trs-lisp/open-input-file.trsl"))
(do ((c (read-char f) 
        (read-char f))) 
    ((eof-object? c) (newline)) 
    (display c))
(close-input-port f)
(fail "open-output-file")
(pass "quote")
(pass "readc-char")
(define x 1)
(set! (' x) 2)
(if (= x 2) 
    (pass "set!")
    (fail "set!"))
(if (string=? "this" "this")
    (pass "string=?")
    (fail "string=?"))
(define t "This is a string")
(if (= 16 (string-length t)) 
    (pass "string-length")
    (fail "string-length"))
(if (string? t) 
    (pass "string?") 
    (fail "string?"))
(set! (' x) "string 1")
(define y (substring x 2 5))
(if (string=? y "tri") 
    (pass "substring") 
    (fail "substring"))


(exit)